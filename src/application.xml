<?xml version="1.0"?>
<js:Application xmlns="http://www.w3.org/1999/xhtml"
                xmlns:js="js.core" xmlns:ui="js.ui" xmlns:conf="js.conf" xmlns:lib="app.libs"
                xmlns:cc="app.components">

    <js:Imports>
        js.core.Base;
    </js:Imports>

    <js:Script>
        (function () {
            return {
                _defaults:{
                    awesomeness:false
                },
                /**
                 * Initializes the app
                 * this method is called right after the script tag is evaluated
                 */
                initialize:function () {
                    this.set("currentTime", new Date().getMilliseconds());
                    this.set("appName", "AWESOME APP");
                    this.set("hello", "Hello");
                    this.set("hash", {a:{b:{c:"Welt"}}});
                    this.set("facets", [
                        {
                            label:'Colors',
                            subitems:['red', "green", "gold"]
                        },
                        {
                            label:'Sizes',
                            subitems:['S', "M", "L"]
                        }
                    ]);

                    this.model = new js.core.Bindable({name:'Bob'});

                    this.set("modelBinding", new js.core.Binding({model:this.model, key:'name'}))
                },
                isAwesome:function () {
                    return this.$['awesomeness'] === true;
                }.on('awesomeness'),
                /**
                 * This method should be called from outside to start the application
                 */
                start:function () {
                    this.render(document.body);
                },
                onItemClick:function (e, caller) {
                    this.set("currentTime", (new Date().getMilliseconds()));
                    this.set("awesomeness", !this.$['awesomeness']);
                },
                foo:function (e) {

                },
                showItem:function (item) {

                }
            }
        })();
    </js:Script>

    <js:Injection>
        <!-- Defines a factory -->
        <conf:Factory type="app.libs.Api" singleton="true"/>
        <!-- Defines a singleton instance-->
        <js:Component foo="bar"/>

        <!-- you can also add factory and singleton at runtime-->
    </js:Injection>

    <!--<cc:Test cid="test1"/>-->
    <!--<cc:Test cid="test2"/>-->

    <!-- TODO DO not allow binding for ID -->
    <div id="test" onclick="onItemClick">
        <span>{hello} {hash.a.b.c} is awesome : {isAwesome}</span>
        <br/>
        <span>The current Time is {currentTime}</span>
    </div>

    <div class="{appName}">
        <!--<js:Template name="ListItem">-->
        <!--</js:Template>-->
    </div>

    <!--<cfg:Modules>-->
    <!--<js:Module src="app.modules.Articles" route="/^articles(.*)$/" />-->
    <!--</cfg:Modules>-->

    <!--<js:ModuleLoader id="">-->
    <!--&lt;!&ndash; optional&ndash;&gt;-->
    <!--<js:ContentPlaceHolder name="main">-->
    <!--</js:ContentPlaceHolder>-->
    <!--</js:ModuleLoader>-->

    <ui:ItemsView tagName="ul" items="{facets}" class="facets" >
        <js:Template name="item">
            <li onclick="onItemClick">
                <b>Select:</b><span>{$item.label}</span>
                <ui:ItemsView items="{$item.subitems}" tagName="ul">
                    <js:Template name="item">
                        <li class="{currentTime}">{$item} for {currentTime} on {hash.a.b.c}</li>
                    </js:Template>
                </ui:ItemsView>
            </li>
        </js:Template>
    </ui:ItemsView>


    <!--comes into moduleloader into content place holders-->
    <!--<header class="fixed">-->

    <!--</header>-->
    <!--<div id="">-->

    <!--</div>-->
    <!--<footer>-->

    <!--</footer>-->

    <!--<div id="asd">-->
    <!--<ui:View>-->
    <!--<ui:Button className="{}">-->

    <!--</ui:Button>-->
    <!--<ui:Listview collection="{products}">-->
    <!--<ui:binding property="" model="" key="" transform="x">-->

    <!--</ui:binding>-->
    <!--<templates>-->
    <!--<template name="item" model="">-->
    <!--<li>-->
    <!--<ui:img src="{data.image}"/>-->
    <!--</li>-->
    <!--</template>-->
    <!--</templates>-->
    <!--</ui:Listview>-->
    <!--</ui:View>-->

    <!--</div>-->

    <!--<js:Module>-->

    <!--</js:Module>-->
</js:Application>