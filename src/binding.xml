<?xml version="1.0"?>
<js:Application xmlns="http://www.w3.org/1999/xhtml"
                xmlns:js="js.core" xmlns:ui="js.ui">

    <js:Imports>
        js.core.Base;
        js.core.Bindable;
        js.core.Binding;
    </js:Imports>

    <js:Script>
        (function (Base, Bindable, Binding) {
            return {
                _defaults:{

                },
                start:function () {
                    console.log("APP STARTS");

                    var target = new Bindable({val:null});

                    var model = new Bindable({});

                    /*
                     ONE WAY BINDING TESTS
                     */
                    var b1 = new Binding({scope:model, path:'a', target:target, targetKey:"val"});

                    model.set("a", "A");
                    console.log(target.get('val'));  // should return "A"


                    b1.destroy();
                    model.set("a", "B");
                    console.log(target.get('val'));  // should return "A"

                    b1 = new Binding({scope:model, path:'a.b', target:target, targetKey:"val"});

                    model.set("a", "A");
                    console.log(target.get('val')); // should return null

                    aModel = new Bindable({b:"B"})
                    model.set("a", aModel);
                    console.log(target.get("val")); // should return "B"

                    aModel.set("b", "B2");
                    console.log(target.get("val")); // should return "B2"

                    a2Model = new Bindable({b:"AWESOME"});
                    model.set("a", a2Model);
                    console.log(target.get("val")); // should return "AWESOME"

                    b1.destroy();

                    b1 = new Binding({scope:model, path:'a.b.c', target:target, targetKey:"val"});

                    model.set("a", "A");
                    console.log(target.get('val')); // should return null

                    aModel = new Bindable({b:"B"})
                    model.set("a", aModel);
                    console.log(target.get("val")); // should return null

                    bModel = new Bindable({c: "WHAT UP"});
                    aModel.set('b',bModel);
                    console.log(target.get("val")); // should return "WHAT UP"

                    a2Model = new Bindable({b:"AWESOME"});
                    model.set("a", a2Model);
                    console.log(target.get("val")); // should return "null"


                    b1 = new Binding({scope:model, path:'a.b', target:target, targetKey:"val", transform:function (val) {
                        return "TRANSFORMED " + val + " BABY";
                    }});

                    aModel = new Bindable({b:"B"})
                    model.set("a", aModel);
                    console.log(target.get("val")); // should return "TRANSFORMED B BABY"


                    /**
                     * SIMPLE TWO WAY BINDING
                     */
                    b1.destroy();
                    b1 = new Binding({scope:model, path:'a', target:target, targetKey:"val", twoWay: true});

                    console.log(model.get('a')); // should return "aModel"
                    target.set({val: 'TargetValue'});
                    console.log(model.get("a")); // should return "TargetValue"


                }
            }
        })
    </js:Script>
</js:Application>