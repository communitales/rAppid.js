{
    "methods": [
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                201,
                203
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_beforeDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                309,
                333
            ],
            "definedBy": "js.core.Bindable",
            "name": "_bindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "value"
                },
                {
                    "name": "key",
                    "types": null,
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                548,
                567
            ],
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "_cloneAttribute",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "attributes",
                    "optional": false,
                    "description": "contains the changed attributes"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "the options passed in the set method"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                845,
                847
            ],
            "description": "called after attributes has set and some of the has been changed\n",
            "abstract": "",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_commitChangedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                743,
                746
            ],
            "definedBy": "js.core.Bindable",
            "name": "_commitInvalidatedAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "fnc",
                    "optional": false
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "cacheId",
                    "optional": true
                },
                {
                    "types": [
                        "Number"
                    ],
                    "name": "delay",
                    "optional": true
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true
                },
                {
                    "types": [
                        "Array"
                    ],
                    "name": "parameters",
                    "optional": true
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "strategy",
                    "optional": true,
                    "defaultValue": "loop",
                    "description": "loop will trigger the function at least every delay, wait will clear the timeout"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                83,
                117
            ],
            "description": "",
            "private": "",
            "definedBy": "js.core.Base",
            "name": "_debounceFunctionCall",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                588,
                590
            ],
            "description": "",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "returns the default attributes and includes the defaults from base classes"
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_defaultAttributes",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                209,
                215
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_destroyCompleted",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                221,
                295
            ],
            "description": "Constructs the schema with the schema definition",
            "private": "",
            "name": "_extendSchema",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                190,
                215
            ],
            "name": "_extendValidators",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                359,
                372
            ],
            "definedBy": "js.core.Bindable",
            "name": "_extract",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "property",
                    "optional": false,
                    "description": "the name of the static property used to find defaults"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                599,
                627
            ],
            "description": "generates a default chain containing the values from this instance and base classes\n",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_generateDefaultsChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                849,
                858
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasAll",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes"
                },
                {
                    "name": "search"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                860,
                869
            ],
            "definedBy": "js.core.Bindable",
            "name": "_hasSome",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                433,
                444
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializationComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                213,
                223
            ],
            "description": "starts the initialization of the `Bindable` if it hasn't initialized yet.\n\nIt calls the following methods:\n\n* initialize();\n* _initializeBindings();\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initialize",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                377,
                427
            ],
            "description": "Initialize all Binding and Event attributes",
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindings",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                429,
                431
            ],
            "definedBy": "js.core.Bindable",
            "name": "_initializeBindingsBeforeComplete",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                198,
                201
            ],
            "description": "\ninvokes the `_initialize` method. This method is a hook function and is overwritten by js.core.Component\n",
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_initializeFromCtor",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                273,
                306
            ],
            "definedBy": "js.core.Bindable",
            "name": "_inject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                238,
                240
            ],
            "description": "\nreturns the chained object defining the required injections\n",
            "returns": {
                "types": [
                    "Object"
                ]
            },
            "private": "",
            "definedBy": "js.core.Bindable",
            "name": "_injectChain",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                205,
                207
            ],
            "definedBy": "js.core.EventDispatcher",
            "name": "_innerDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "childFactory"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                336,
                338
            ],
            "name": "_isChildFactoryDependentObject",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                446,
                448
            ],
            "definedBy": "js.core.Bindable",
            "name": "_postConstruct",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                450,
                452
            ],
            "definedBy": "js.core.Bindable",
            "name": "_preDestroy",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "field"
                },
                {
                    "name": "error"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                469,
                478
            ],
            "description": " TODO: combine _setError and _setErrors",
            "name": "_setError",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Array"
                    ],
                    "name": "errors",
                    "optional": false
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                486,
                512
            ],
            "description": "",
            "private": "",
            "name": "_setErrors",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                255,
                258
            ],
            "description": "sets up the Bindable or Component. It will inject the required injections and\nalso will bind the application wide `MessageBus` to all methods annotated with the\n`.bus()` method annotation\n\nFor `Components` the setUp method is invoked automatically during the add of the Component.\nFor non `Components`\n\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_setUp",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                268,
                271
            ],
            "description": "tears down the Bindable or Component. It will remove the injected variables and\nalso will unbind the annotated event handlers from the application wide `MessageBus`\n",
            "private": "",
            "see": [
                "{js.core.MessageBus}"
            ],
            "definedBy": "js.core.Bindable",
            "name": "_tearDown",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                335,
                357
            ],
            "definedBy": "js.core.Bindable",
            "name": "_unbindBus",
            "visibility": "protected"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false,
                    "description": "The name of the event"
                },
                {
                    "name": "callback"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "description": "This sets the scope for the callback function"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                72,
                88
            ],
            "description": "Binds a callback and a scope to a given eventType\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "bind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                886,
                888
            ],
            "description": "Clears all attributes",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "clear",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                365,
                368
            ],
            "description": "Clears all errors",
            "name": "clearErrors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                542,
                547
            ],
            "description": "Clones the entity with all attributes on this.$\n",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "definedBy": "js.core.Bindable",
            "overwritesMethod": true,
            "name": "clone",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "action",
                    "optional": false,
                    "description": "\"create\", \"save\", \"update\" or \"delete\""
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                358,
                360
            ],
            "description": "Composes the data based on the schema.\nCan pe used to pre compose the data for the processor",
            "returns": {
                "types": [
                    "Object"
                ],
                "description": "all data that should be serialized"
            },
            "name": "compose",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                588,
                590
            ],
            "description": "Returns the context model if the context is set",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "name": "contextModel",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "childFactory",
                    "optional": false
                },
                {
                    "types": [
                        "String",
                        "Number"
                    ],
                    "name": "id",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                330,
                334
            ],
            "description": "Creates an entity in the context of the given entity",
            "returns": {
                "types": [
                    "js.data.Entity"
                ]
            },
            "name": "createEntity",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "attributes",
                    "types": [
                        "Object"
                    ],
                    "optional": true,
                    "description": "the default attributes which will be set during instantiation"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                148,
                156
            ],
            "definedBy": "js.core.Base",
            "overwritesMethod": true,
            "name": "ctor",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                188,
                199
            ],
            "description": "Clears up the instance",
            "definedBy": "js.core.EventDispatcher",
            "name": "destroy",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                40,
                42
            ],
            "description": "this is an empty function doing nothing. It can be used as fallback if a method requires a\ncallback function, which hasn't been passed.\n\n```\nfunction myFunction(callback) {\ncallback = callback || this.emptyCallback;\n}\n```\n",
            "returns": {
                "types": [
                    "Function"
                ],
                "description": "a function doing nothing"
            },
            "definedBy": "js.core.Base",
            "name": "emptyCallback",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false,
                    "description": "the name of the field"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                519,
                524
            ],
            "description": "Returns the error for a given field",
            "deprecated": "",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "error",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                375,
                377
            ],
            "description": "Returns the errors of the entity",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ]
            },
            "name": "errors",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "field",
                    "optional": false,
                    "description": "the name of the field"
                }
            ],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                384,
                386
            ],
            "description": "Returns the error for a given field",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "fieldError",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "scope",
                    "optional": true,
                    "defaultValue": "this",
                    "description": "the scope where the path is evaluated"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "or path"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                755,
                825
            ],
            "description": "evaluates a path to retrieve a value\n",
            "returns": {
                "types": null,
                "description": "the value for the path or undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "get",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "childFactory",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                302,
                322
            ],
            "description": "Returns the correct context for a child factory",
            "returns": {
                "types": [
                    "js.data.DataSource.Context"
                ]
            },
            "name": "getContextForChild",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fncName"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                469,
                482
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForFncName",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                454,
                467
            ],
            "definedBy": "js.core.Bindable",
            "name": "getScopeForKey",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "optional": false,
                    "description": "to get the value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                833,
                835
            ],
            "description": "determinate if a attribute is available\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if attribute is not undefined"
            },
            "definedBy": "js.core.Bindable",
            "name": "has",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                581,
                583
            ],
            "description": "Returns the value of the idField",
            "returns": {
                "types": [
                    "*"
                ]
            },
            "name": "identifier",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                574,
                576
            ],
            "description": "The init method can be used to setup/init an entity asynchronously.\nIt must be called from outside by hand.\n",
            "name": "init",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                228,
                229
            ],
            "description": "the initialize method is a hook function to add a custom logic during the initiation process.",
            "definedBy": "js.core.Bindable",
            "name": "initialize",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                978,
                995
            ],
            "definedBy": "js.core.Bindable",
            "name": "isDeepEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "b"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                996,
                998
            ],
            "definedBy": "js.core.Bindable",
            "name": "isEqual",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {
                "on": [
                    [
                        "this",
                        "isValidChanged"
                    ]
                ]
            },
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                393,
                404
            ],
            "description": "Returns true if valid\n",
            "returns": {
                "types": [
                    "Boolean"
                ]
            },
            "name": "isValid",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Array"
                    ],
                    "name": "message",
                    "optional": false,
                    "description": "the message to log"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "level",
                    "optional": true,
                    "defaultValue": "\"info\"",
                    "description": "the service level of (debug, info, warn, error)"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                50,
                71
            ],
            "description": "logs messages to configured logging functions\n",
            "definedBy": "js.core.Base",
            "name": "log",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "data",
                    "optional": false,
                    "description": "the data parsed by the processor"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "action",
                    "optional": true,
                    "description": "the action of the data source (\"create\", \"save\", \"update\" or \"delete\")"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "options",
                    "optional": true,
                    "description": "some options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                347,
                349
            ],
            "description": "Parses the data. Can be overridden to change parsed data.\n",
            "name": "parse",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                24,
                26
            ],
            "description": "determinate if the application runs in the browser or on node\n",
            "returns": {
                "types": [
                    "Boolean"
                ],
                "description": "true if the application runs in a browser"
            },
            "definedBy": "js.core.Base",
            "name": "runsInBrowser",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "The attribute key"
                },
                {
                    "types": [
                        "String"
                    ],
                    "name": "value",
                    "optional": false,
                    "description": "The attribute value"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": false,
                    "description": "A hash of options"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                639,
                725
            ],
            "description": "Sets new values for attributes and notify about changes\n",
            "returns": {
                "types": [
                    "js.core.Bindable"
                ],
                "description": "this"
            },
            "definedBy": "js.core.Bindable",
            "name": "set",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "key"
                },
                {
                    "name": "value"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                727,
                741
            ],
            "definedBy": "js.core.Bindable",
            "name": "setLater",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                494,
                522
            ],
            "description": "Writes attributes back to the source",
            "definedBy": "js.core.Bindable",
            "name": "sync",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "name": "fnc"
                },
                {
                    "name": "cacheId"
                },
                {
                    "name": "callback"
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Base.js",
            "lineNumbers": [
                119,
                155
            ],
            "definedBy": "js.core.Base",
            "name": "synchronizeFunctionCall",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "EventDispatcher.Event",
                        "Object"
                    ],
                    "name": "event",
                    "optional": false,
                    "description": "If you use an Object the object is wrapped in an Event"
                },
                {
                    "types": null,
                    "name": "target",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                97,
                160
            ],
            "description": "Triggers a specific event and the * event\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "trigger",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String"
                    ],
                    "name": "eventType",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                },
                {
                    "name": "scope"
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/EventDispatcher.js",
            "lineNumbers": [
                168,
                183
            ],
            "description": "Unbinds callbacks for events\n",
            "definedBy": "js.core.EventDispatcher",
            "name": "unbind",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "String",
                        "Object"
                    ],
                    "name": "key",
                    "optional": false,
                    "description": "the attribute or attributes to unset"
                },
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/core/Bindable.js",
            "lineNumbers": [
                877,
                880
            ],
            "description": "Unset attribute on $",
            "returns": {
                "types": [
                    "this"
                ]
            },
            "definedBy": "js.core.Bindable",
            "name": "unset",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "Object"
                    ],
                    "name": "options",
                    "optional": true
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": true
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                416,
                466
            ],
            "description": "Validates the entity.\nIf there are asynchronous validators applied use the callback to get notified when validation has finished.\n",
            "name": "validate",
            "visibility": "public"
        },
        {
            "type": "Method",
            "parameter": [
                {
                    "types": [
                        "js.data.Entity"
                    ],
                    "name": "entity",
                    "optional": false
                },
                {
                    "types": [
                        "Function"
                    ],
                    "name": "callback",
                    "optional": false
                }
            ],
            "annotations": {},
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                530,
                536
            ],
            "description": "Validates a sub entity",
            "name": "validateSubEntity",
            "visibility": "public"
        }
    ],
    "staticMethods": [],
    "defaults": {},
    "properties": {
        "validators": {
            "name": "validators",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                164,
                166
            ],
            "propertyType": "complex",
            "value": " [\n                new SchemaValidator()\n            ]",
            "description": "An array of validators to apply"
        },
        "idField": {
            "name": "idField",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                170,
                170
            ],
            "value": "\"id\"",
            "propertyType": "value",
            "description": "The field for the id. Is automatically added to the schema as String"
        },
        "createdField": {
            "name": "createdField",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                174,
                174
            ],
            "value": "false",
            "propertyType": "value",
            "description": "The created field. Is automatically added to the schema with Date"
        },
        "updatedField": {
            "name": "updatedField",
            "visibility": "public",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                179,
                179
            ],
            "value": "false",
            "propertyType": "value",
            "description": "The updated field. Is automatically added to the schema with Date"
        },
        "$context": {
            "name": "$context",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                183,
                183
            ],
            "value": "null",
            "propertyType": "value",
            "description": "The context of the entity"
        },
        "$dependentObjectContext": {
            "name": "$dependentObjectContext",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                184,
                184
            ],
            "value": "null",
            "propertyType": "value"
        },
        "$isEntity": {
            "name": "$isEntity",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                187,
                187
            ],
            "value": "true",
            "propertyType": "value",
            "description": " TODO: merge this together"
        },
        "$isDependentObject": {
            "name": "$isDependentObject",
            "visibility": "private",
            "definedInFile": "js/data/Entity.js",
            "lineNumbers": [
                188,
                188
            ],
            "value": "true",
            "propertyType": "value"
        }
    },
    "fqClassName": "js.data.Entity",
    "inherit": "js.core.Bindable",
    "dependencies": [
        "flow",
        "js.core.Bindable",
        "js.core.List",
        "js.data.validator.Validator",
        "require",
        "underscore"
    ],
    "description": " TODO: add idField validator with this reg ex ^(?:[\\w\\-](?<!_))+$",
    "type": "js",
    "file": "js/data/Entity.js",
    "package": "js.data",
    "inheritancePath": [
        "js.core.Bindable",
        "js.core.EventDispatcher",
        "js.core.Base"
    ]
}