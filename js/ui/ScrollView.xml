<?xml version="1.0"?>
<ui:View xmlns="http://www.w3.org/1999/xhtml" xmlns:js="js.core" xmlns:ui="js.ui">
    <js:Imports>
        js.ui.View;
    </js:Imports>
    <js:Script>
        <![CDATA[
        (function (View) {
            return {
                defaults: {
                    componentClass: 'scroll-container',
                    vertical: true,
                    horizontal: true,
                    mouseTracking: true,
                    scrollPaneClass: 'scroll-pane'
                },
                ctor: function () {
                    this.callBase();

                    this.$speed = {x: 0, y: 0};
                    this.$currentPos = {x: 0, y: 0};
                    this.$newPos = {x: 0, y: 0};
                    this.$mousePos = {x: 0, y: 0};
                    this.$trackedPos = {x: 0, y: 0};
                    this.$isPositiv = {x: false, y: false};
                    this.$isOutOfBounce = {x: false, y: false};
                    this.$mult = {x: 0, y: 0};
                    this.$delta = {width: 0, height: 0};
                    this.$isMouseDown = false;
                    this.$isScrolling = false;
                    this.$t = (new Date()).getTime();
                    this.$currentT = {x: 0, y: 0};
                    this.$keepInBounceInterval = null;
                    this.$trackSpeedInterval = null;
                    this.$speedInterval = {x: null, y: null};
                    this.$propertyMap = {
                        x: "offsetWidth",
                        y: "offsetHeight"
                    };
                    this.$transformProperty = null;

                },
                _getTransformProperty: function getTransformProperty(element) {
                    // Note that in some versions of IE9 it is critical that
                    // msTransform appear in this list before MozTransform
                    var properties = [
                        'transform',
                        'WebkitTransform',
                        'msTransform',
                        'MozTransform',
                        'OTransform'
                    ];
                    var p;
                    while (p = properties.shift()) {
                        if (typeof element.style[p] !== 'undefined') {
                            return p;
                        }
                    }
                    return false;
                },
                _startTracking: function (x, y) {
                    if (this.$speedInterval["x"]) {
                        clearInterval(this.$speedInterval["x"]);
                    }
                    if (this.$speedInterval["y"]) {
                        clearInterval(this.$speedInterval["y"]);
                    }

                    this.$t = new Date().getTime();
                    this.$mousePos.x = x;
                    this.$mousePos.y = y;

                    this.$isMouseDown = true;
                },
                _initSpeedInterval: function (axis, dt) {
                    if (this.$speedInterval[axis]) clearInterval(this.$speedInterval[axis]);
                    this.$speed[axis] = (this.$trackedPos[axis] - this.$newPos[axis]) / dt;
                    if (this.$speed[axis] !== 0) {
                        // speed.x = speed.x > 1.4 ? 1.4 : speed.x;

                        var sub = this.$speed[axis] * 0.02;
                        var d;
                        this.$isPositiv[axis] = this.$speed[axis] >= 0;

                        var self = this;
                        this.$speedInterval[axis] = setInterval(function () {
                            if (self.$isOutOfBounce[axis] || self.$isPositiv[axis] && self.$speed[axis] <= 0 || !self.$isPositiv[axis] && self.$speed[axis] >= 0) {
                                clearInterval(self.$speedInterval[axis]);
                            }
                            d = -(self.$speed[axis] * ((new Date().getTime()) - self.$currentT[axis]));
                            if (axis == "x") {
                                self._moveBy(d, 0);
                            } else {
                                self._moveBy(0, d);
                            }

                            self.$speed[axis] = self.$speed[axis] - sub;

                            self.$currentT[axis] = new Date().getTime();
                        }, 1);
                    }
                },
                _stopTracking: function () {
                    this.$isMouseDown = false;

                    this.$currentT.x = this.$currentT.y = new Date().getTime();

                    var dt = this.$currentT.x - this.$t;

                    if (this.$.horizontal) this._initSpeedInterval("x", dt);
                    if (this.$.vertical) this._initSpeedInterval("y", dt);
                },
                render: function () {
                    var el = this.callBase();
                    this.$scrollPane = el.childNodes[0];

                    this.$transformProperty = this._getTransformProperty(el);

                    var self = this;

                    var spanMap = this.$propertyMap;
                    var delta;
                    var keepInBounce = function (axis) {
                        delta = self.$el[spanMap[axis]] - self.$scrollPane[spanMap[axis]];
                        if (delta < 0 && !self.$isMouseDown && !self.$isScrolling && (self.$newPos[axis] > 0 || self.$newPos[axis] < delta)) {
                            self.$isOutOfBounce[axis] = true;
                            self.$mult[axis] = (self.$newPos[axis] > 0 ? -1 : 1);
                            self.$newPos[axis] = self.$newPos[axis] + 0.03 * self.$el[spanMap[axis]] * self.$mult[axis];
                            if (self.$newPos[axis] < 0 && self.$mult[axis] < 0) self.$newPos[axis] = 0;
                            if (self.$newPos[axis] > delta && self.$mult[axis] > 0) self.$newPos[axis] = delta;

                            self._setCssTranslate(self.$newPos.x, self.$newPos.y);
                            self.$currentPos[axis] = self.$newPos[axis];
                        } else {
                            self.$isOutOfBounce[axis] = false;
                        }
                    };

                    this.$keepInBounceInterval = setInterval(function () {
                        if (self.$.horizontal) keepInBounce("x");
                        if (self.$.vertical) keepInBounce("y");
                    }, 20);
//
                    this.$trackSpeedInterval = setInterval(function () {
                        if (self.$isMouseDown) {
                            self.$t = (new Date().getTime());
                        }
                        self.$trackedPos.x = self.$newPos.x;
                        self.$trackedPos.y = self.$newPos.y;

                    }, 100);

                    return el;
                },
                _calculateDelta: function (val, axis) {
                    if (val === 0 || !this.$isMouseDown) {
                        return val;
                    }
                    var delta = this.$el[this.$propertyMap[axis]] - this.$scrollPane[this.$propertyMap[axis]];

                    if (val > 0) {
                        if (this.$mousePos[axis] > this.$el[this.$propertyMap[axis]] || delta > 0) {

                            return 0;
                        } else if (this.$currentPos[axis] > 0 || this.$currentPos[axis] < delta) {
                            return val * ((this.$el[this.$propertyMap[axis]] - this.$mousePos[axis]) / this.$el[this.$propertyMap[axis]]);
                        }

                    } else {
                        if (this.$mousePos[axis] < 0 || delta > 0) {
                            return 0;
                        } else if (this.$currentPos[axis] > 0 || this.$currentPos[axis] < delta) {
                            return val * (( this.$mousePos[axis]) / this.$el[this.$propertyMap[axis]]);
                        }
                    }

                    return val;

                },
                _moveBy: function (dx, dy) {
                    dx = this._calculateDelta(dx * this.$.horizontal, "x");
                    dy = this._calculateDelta(dy * this.$.vertical, "y");


                    this.$newPos.x = this.$currentPos.x + dx;
                    this.$newPos.y = this.$currentPos.y + dy;


                    this._setCssTranslate(this.$newPos.x, this.$newPos.y);

                    this.$currentPos.x = this.$newPos.x;
                    this.$currentPos.y = this.$newPos.y;

                    return true;
                },
                _posToCss: function (x, y) {
                    return 'translate3d(' + x + "px," + y + "px,0px)";
                },
                _setCssTranslate: function (x, y) {
                    this.$scrollPane.style[this.$transformProperty] = this._posToCss(x, y);
                },
                _bindDomEvents: function (el) {

                    var self = this;
                    if (this.$.mouseTracking) {
                        this.addEventListener('mousemove', function (e) {
                            if (self.$isMouseDown) {
                                self._moveBy(e.clientX - self.$mousePos.x, e.clientY - self.$mousePos.y);
                                self.$mousePos.x = e.clientX;
                                self.$mousePos.y = e.clientY;
                            }
                        });
                        this.addEventListener('mousedown', function (e) {
                            self._startTracking(e.clientX, e.clientY);
                        });
                        this.addEventListener('mouseup', function (e) {
                            self._stopTracking();
                        });
                    }

                    if (el.hasOwnProperty('ontouchstart')) {
                        // were on a mobile device

                        el.addEventListener('touchstart', function (e) {
                            if (e.touches.length == 1) {
                                self._startTracking(e.touches[0].clientX, e.touches[0].clientY);
                                e.preventDefault();
                            }
                        });
                        el.addEventListener('touchmove', function (e) {
                            if (e.touches.length == 1) {
                                if (self.$isMouseDown) {
                                    self._moveBy(e.touches[0].clientX - self.$mousePos.x, e.touches[0].clientY - self.$mousePos.y);
                                    self.$mousePos.x = e.touches[0].clientX;
                                    self.$mousePos.y = e.touches[0].clientY;
                                }
                            }
                        });
                        el.addEventListener('touchend', function (e) {
                            self._stopTracking();
                        });
                    }


                }
            }
        })
        ]]>
    </js:Script>
    <div class="{scrollPaneClass}" >
        <ui:PlaceHolder name="content"/>
    </div>
</ui:View>